<?php

declare(strict_types=1);

/**
 * Exemples d'utilisation du syst√®me de logging ModelSchema
 *
 * Ce fichier montre comment utiliser et configurer le syst√®me de logging
 * d√©taill√© du package Laravel ModelSchema.
 */

require_once __DIR__.'/../vendor/autoload.php';

use Grazulex\LaravelModelschema\Services\Generation\GenerationService;
use Grazulex\LaravelModelschema\Services\LoggingService;
use Grazulex\LaravelModelschema\Services\SchemaService;
use Illuminate\Support\Facades\Log;

echo "=== Exemples d'utilisation du syst√®me de logging ModelSchema ===\n\n";

// 1. Configuration basique du logging
echo "1. Configuration du logging\n";
echo "----------------------------\n";

// Le service de logging est automatiquement configur√© via config/modelschema.php
// Vous pouvez √©galement le configurer manuellement :

$logger = new LoggingService();

// V√©rifier si le logging est activ√©
if ($logger->isEnabled()) {
    echo "‚úÖ Logging activ√©\n";
    echo 'üìã Session ID: '.$logger->getSessionId()."\n";
} else {
    echo "‚ùå Logging d√©sactiv√©\n";
}

// D√©sactiver temporairement le logging
$logger->setEnabled(false);
echo "üîá Logging temporairement d√©sactiv√©\n";

// R√©activer le logging
$logger->setEnabled(true);
echo "üîä Logging r√©activ√©\n\n";

// 2. Logging manuel d'op√©rations
echo "2. Logging manuel d'op√©rations\n";
echo "-------------------------------\n";

// D√©marrage d'une op√©ration
$logger->logOperationStart('exemple_operation', [
    'param1' => 'valeur1',
    'param2' => 42,
]);

// Simulation d'un travail
usleep(100000); // 100ms

// Log de debug pendant l'op√©ration
$logger->logDebug('Traitement en cours', [
    'progress' => '50%',
    'items_processed' => 25,
    'items_total' => 50,
]);

// Log d'avertissement
$logger->logWarning(
    'Op√©ration lente d√©tect√©e',
    ['operation' => 'exemple_operation', 'duration_ms' => 100],
    'Consid√©rer l\'optimisation du code'
);

// Fin de l\'op√©ration avec m√©triques
$logger->logOperationEnd('exemple_operation', [
    'items_processed' => 50,
    'success_rate' => 98.5,
    'memory_used' => '45MB',
]);

echo "üìù Op√©ration logg√©e avec d√©tails complets\n\n";

// 3. Logging de validation
echo "3. Logging de validation\n";
echo "------------------------\n";

// Validation r√©ussie
$logger->logValidation(
    'schema_validation',
    true,
    [], // pas d'erreurs
    ['deprecated_field' => 'Le champ "old_field" est d√©pr√©ci√©'], // warnings
    ['fields_validated' => 15, 'relations_validated' => 3] // stats
);

// Validation √©chou√©e
$logger->logValidation(
    'rules_validation',
    false,
    ['Field "email" is required', 'Invalid relationship type'], // erreurs
    ['Performance issue with "exists" rule'], // warnings
    ['rules_checked' => 25, 'errors_found' => 2] // stats
);

echo "‚úÖ Validations logg√©es\n\n";

// 4. Logging de g√©n√©ration
echo "4. Logging de g√©n√©ration\n";
echo "------------------------\n";

$logger->logGeneration(
    'model',
    'User',
    true,
    ['file_size' => 2048, 'generation_time_ms' => 45]
);

$logger->logGeneration(
    'migration',
    'CreateUsersTable',
    false,
    ['error' => 'Template not found', 'attempted_path' => '/templates/migration.stub']
);

echo "üéØ G√©n√©rations logg√©es\n\n";

// 5. Logging de parsing YAML
echo "5. Logging de parsing YAML\n";
echo "---------------------------\n";

$logger->logYamlParsing(
    'user.schema.yml',
    true,
    [
        'parse_time_ms' => 23,
        'file_size_bytes' => 1024,
        'fields_found' => 8,
        'relations_found' => 2,
    ]
);

$logger->logYamlParsing(
    'invalid.schema.yml',
    false,
    [],
    ['YAML syntax error at line 15']
);

echo "üìÑ Parsing YAML logg√©\n\n";

// 6. Logging de cache
echo "6. Logging de cache\n";
echo "-------------------\n";

$logger->logCache('hit', 'schema:user', true, 0.001);
$logger->logCache('miss', 'schema:product', false, 0.002);
$logger->logCache('store', 'schema:product', false, 0.015);
$logger->logCache('clear', 'all_schemas', false);

echo "üíæ Op√©rations de cache logg√©es\n\n";

// 7. Logging de performance
echo "7. Logging de performance\n";
echo "-------------------------\n";

$logger->logPerformance('complete_generation', [
    'total_time_ms' => 1250,
    'files_generated' => 7,
    'peak_memory_mb' => 89,
    'cache_hits' => 12,
    'cache_misses' => 3,
]);

echo "üìä M√©triques de performance logg√©es\n\n";

// 8. Logging d'erreurs
echo "8. Logging d'erreurs\n";
echo "--------------------\n";

try {
    throw new Exception('Erreur simul√©e pour d√©monstration');
} catch (Exception $e) {
    $logger->logError(
        'Erreur lors du traitement',
        $e,
        ['context' => 'exemple', 'user_id' => 123]
    );
}

echo "‚ùå Erreur logg√©e avec trace compl√®te\n\n";

// 9. Int√©gration avec SchemaService
echo "9. Int√©gration avec SchemaService\n";
echo "---------------------------------\n";

// Le SchemaService utilise automatiquement le logging
$schemaService = new SchemaService();

// Cr√©er un fichier de test temporaire
$testYaml = <<<'YAML'
model: TestModel
table: test_models
fields:
  id:
    type: unsignedBigInteger
    primary: true
  name:
    type: string
    length: 255
relationships:
  posts:
    type: hasMany
    model: Post
YAML;

$tempFile = tempnam(sys_get_temp_dir(), 'test_schema');
file_put_contents($tempFile, $testYaml);

echo 'üìÅ Fichier test cr√©√©: '.basename($tempFile)."\n";

// Le parsing sera automatiquement logg√©
try {
    $schema = $schemaService->parseYamlFile($tempFile);
    echo '‚úÖ Schema pars√©: '.$schema->name."\n";

    // La validation sera automatiquement logg√©e
    $errors = $schemaService->validateSchema($schema);
    echo '‚úÖ Schema valid√©: '.(empty($errors) ? 'Aucune erreur' : count($errors).' erreurs')."\n";

} catch (Exception $e) {
    echo '‚ùå Erreur: '.$e->getMessage()."\n";
}

// Nettoyage
unlink($tempFile);
echo "üßπ Fichier test supprim√©\n\n";

// 10. Int√©gration avec GenerationService
echo "10. Int√©gration avec GenerationService\n";
echo "--------------------------------------\n";

if (isset($schema)) {
    $generationService = new GenerationService();

    // La g√©n√©ration sera automatiquement logg√©e
    try {
        $result = $generationService->generateModel($schema);
        echo "‚úÖ Mod√®le g√©n√©r√© avec succ√®s\n";

        $allResults = $generationService->generateAll($schema, [
            'model' => true,
            'migration' => true,
        ]);
        echo '‚úÖ G√©n√©ration compl√®te: '.count($allResults)." √©l√©ments\n";

    } catch (Exception $e) {
        echo '‚ùå Erreur de g√©n√©ration: '.$e->getMessage()."\n";
    }
}

echo "\n=== Configuration avanc√©e ===\n";

echo <<<CONFIG
Pour configurer le logging en d√©tail, ajoutez dans config/logging.php :

'channels' => [
    'modelschema' => [
        'driver' => 'daily',
        'path' => storage_path('logs/modelschema.log'),
        'level' => env('MODELSCHEMA_LOG_LEVEL', 'debug'),
        'days' => 14,
    ],
    
    'modelschema_performance' => [
        'driver' => 'single',
        'path' => storage_path('logs/modelschema-performance.log'),
        'level' => 'info',
        'formatter' => Monolog\Formatter\JsonFormatter::class,
    ],
],

Et dans config/modelschema.php :

'logging' => [
    'enabled' => env('MODELSCHEMA_LOGGING_ENABLED', true),
    'channel' => env('MODELSCHEMA_LOG_CHANNEL', 'modelschema'),
    'performance_thresholds' => [
        'yaml_parsing_ms' => 1000,
        'validation_ms' => 2000,
        'generation_ms' => 3000,
    ],
],

Variables d'environnement (.env) :
MODELSCHEMA_LOGGING_ENABLED=true
MODELSCHEMA_LOG_CHANNEL=modelschema
MODELSCHEMA_LOG_LEVEL=debug

CONFIG;

echo "\n=== Exemple de sortie de log ===\n";

echo <<<'LOG'
[2024-12-19 10:30:15] modelschema.INFO: üöÄ Starting parseYamlFile {"session_id":"a1b2c3d4","operation":"parseYamlFile","context":{"file":"user.schema.yml"},"timestamp":"2024-12-19T10:30:15.123456Z","memory_usage":"45.2 MB","context_depth":1}

[2024-12-19 10:30:15] modelschema.DEBUG: ‚ö° Cache miss: user.schema.yml {"session_id":"a1b2c3d4","cache_operation":"miss","cache_key":"user.schema.yml","cache_hit":false,"current_operation":"parseYamlFile"}

[2024-12-19 10:30:15] modelschema.INFO: üìÑ YAML Parsing: user.schema.yml {"session_id":"a1b2c3d4","source":"user.schema.yml","success":true,"statistics":{"parse_time_ms":23.45,"field_count":8,"relationship_count":2,"file_size":1024},"current_operation":"parseYamlFile","memory_usage":"45.8 MB"}

[2024-12-19 10:30:15] modelschema.DEBUG: üíæ Cache store: user.schema.yml {"session_id":"a1b2c3d4","cache_operation":"store","cache_key":"user.schema.yml","cache_hit":false,"duration_ms":1.23,"current_operation":"parseYamlFile"}

[2024-12-19 10:30:15] modelschema.INFO: ‚úÖ Completed parseYamlFile {"session_id":"a1b2c3d4","operation":"parseYamlFile","duration_ms":45.67,"memory_usage":"46.1 MB","memory_peak":"46.3 MB","metrics":{"source":"parse","parse_time_ms":23.45,"cache_store_time_ms":1.23,"field_count":8,"relationship_count":2},"context_depth":0}

LOG;

echo "\n‚ú® Syst√®me de logging ModelSchema pr√™t √† l'emploi !\n";
echo "üìñ Consultez les logs dans storage/logs/modelschema.log\n";
echo "üîç Activez le debug avec MODELSCHEMA_LOG_LEVEL=debug\n";
echo "üìä Surveillez les performances avec les seuils configur√©s\n\n";
